{"mappings":"qhBAkDA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,gBACjCC,EAASF,SAASC,cAAc,eAChCE,EAAWH,SAASC,cAAc,iBAuBxC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,QAAQC,IAAIJ,GAEZK,YAAW,KACLL,GACFF,EAAQ,uBAAqBH,QAAiBC,OAE9CG,EAAK,sBAAoBJ,QAAeC,SACzCA,MAIP,SAASU,EAAuBC,GAC9BC,EAAArB,GAASsB,OAAOC,QAAQH,GAG1B,SAASI,EAAqBC,GAC5BJ,EAAArB,GAASsB,OAAOI,QAAQD,GAzCRtB,SAASC,cAAc,UAG/BuB,iBAAiB,SAE3B,SAA8BC,GAC5BA,EAAEC,iBAEF,IAAIpB,EAAQqB,OAAO5B,EAAQ6B,OAC3B,MAAMC,EAAOF,OAAOzB,EAAO0B,OACrBE,EAASH,OAAOxB,EAASyB,OAE/B,IAAKvB,SAAW,EAAGA,UAAYyB,EAAQzB,WACrCD,EAAcC,SAAUC,GAAOyB,KAAKf,GAAwBgB,MAAMX,GAClEf,GAASuB","sources":["src/js/03-promises.js"],"sourcesContent":["// Задание 3 - генератор промисов\n// Выполняй это задание в файлах 03-promises.html и 03-promises.js. Посмотри демо видео работы генератора промисов.\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Библиотека уведомлений\n// ВНИМАНИЕ\n// Этот функционал не обязателен при сдаче задания, но будет хорошей дополнительной практикой.\n\n// Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n\n\n\nimport Notiflix from 'notiflix';\n\nconst delayEL = document.querySelector('[name=delay]');\nconst stepEl = document.querySelector('[name=step]');\nconst amountEl = document.querySelector('[name=amount]');\nconst btnSubmit = document.querySelector('button');\n// const positions = [];\n\nbtnSubmit.addEventListener('click', onStartCreatePromise);\n\nfunction onStartCreatePromise(e) {\n  e.preventDefault();\n\n  let delay = Number(delayEL.value);\n  const step = Number(stepEl.value);\n  const amount = Number(amountEl.value);\n\n  for (position = 1; position <= amount; position++) {\n    createPromise(position, delay).then(onCreatePromiseSuccess).catch(onCreatePromiseError);\n    delay += step;\n    // positions.push(i);\n  }\n\n  // const promises = positions.map((position, delay) => createPromise(position, delay));\n  // Promise.all(promises).then(onCreatePromiseSuccess).catch(onCreatePromiseError);\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    console.log(shouldResolve);\n  \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\n  })\n};\n\nfunction onCreatePromiseSuccess(result) {\n  Notiflix.Notify.success(result);\n};\n\nfunction onCreatePromiseError(error) {\n  Notiflix.Notify.failure(error);\n};"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$delayEL","document","querySelector","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","console","log","setTimeout","$47d4ff9957288465$var$onCreatePromiseSuccess","result","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$onCreatePromiseError","error","failure","addEventListener","e","preventDefault","Number","value","step","amount","then","catch"],"version":3,"file":"03-promises.8b83c7f5.js.map"}